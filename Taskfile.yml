version: '3'

vars:
  BUILD_DIR: .build
  DIST_DIR: .dist
  TEST_DIR: .test
  BINARY_NAME: pulse
  COVERAGE_FILE: "{{.TEST_DIR}}/coverage.out"
  COVERAGE_HTML: "{{.TEST_DIR}}/coverage.html"
  VERSION:
    sh: git rev-parse --abbrev-ref HEAD || echo "main"
  BUILD:
    sh: git rev-parse --short HEAD || echo "unknown"

tasks:
  default:
    desc: Display available tasks
    cmds:
      - task --list

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}} {{.DIST_DIR}} {{.TEST_DIR}}

  setup:
    desc: Create necessary directories
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - mkdir -p {{.DIST_DIR}}
      - mkdir -p {{.TEST_DIR}}

  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  lint:
    desc: Lint Go code
    cmds:
      - go vet ./...

  build:
    desc: Build the CLI application
    deps: [setup, fmt, lint]
    cmds:
      - go build -ldflags "-X main.version={{.VERSION}} -X main.build={{.BUILD}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} cmd/pulse/main.go
    sources:
      - '**/*.go'
    generates:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  test:
    desc: Run tests
    deps: [setup]
    cmds:
      - go test -v ./... -outputdir={{.TEST_DIR}}

  coverage:
    desc: Generate test coverage report
    deps: [setup]
    cmds:
      - go test -coverprofile={{.COVERAGE_FILE}} ./...
      - go tool cover -html={{.COVERAGE_FILE}} -o {{.COVERAGE_HTML}}
      - go tool cover -func={{.COVERAGE_FILE}}
      - echo "Coverage report generated at {{.COVERAGE_HTML}}"

  install:
    desc: Install the CLI application
    deps: [build]
    cmds:
      - cp {{.BUILD_DIR}}/{{.BINARY_NAME}} $GOPATH/bin/

  init-config:
    desc: Initialize default configuration files
    deps: [build]
    cmds:
      - mkdir -p ~/.pulse/config ~/.pulse/data
      - cp config/metrics.yaml ~/.pulse/config/
      - cp config/levers.yaml ~/.pulse/config/
      - cp data/metrics.yaml ~/.pulse/data/

  run:
    desc: Run the CLI application
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} {{.CLI_ARGS}}

  run-report:
    desc: Generate a security posture report
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} report {{.CLI_ARGS}}

  run-report-json:
    desc: Generate a security posture report in JSON format
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} report --format json {{.CLI_ARGS}}

  run-category-report:
    desc: Generate a report for a specific category
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} report --category {{.CATEGORY}} {{.CLI_ARGS}}
    requires:
      vars: [CATEGORY]

  run-list-metrics:
    desc: List all available metrics
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} list metrics {{.CLI_ARGS}}

  run-list-categories:
    desc: List all available categories
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} list categories {{.CLI_ARGS}}

  run-update-metric:
    desc: Update a metric value
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} update --metric {{.METRIC}} --value {{.VALUE}} {{.CLI_ARGS}}
    requires:
      vars: [METRIC, VALUE]

  release:
    desc: Build release artifacts for multiple platforms
    deps: [clean, setup]
    cmds:
      # Ensure directories exist
      - mkdir -p {{.BUILD_DIR}}
      - mkdir -p {{.DIST_DIR}}
      
      # Build for Linux
      - GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version={{.VERSION}} -X main.build={{.BUILD}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-amd64 cmd/pulse/main.go
      - tar -czf {{.DIST_DIR}}/{{.BINARY_NAME}}-linux-amd64.tar.gz -C {{.BUILD_DIR}} {{.BINARY_NAME}}-linux-amd64
      
      # Build for Windows
      - GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version={{.VERSION}} -X main.build={{.BUILD}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-windows-amd64.exe cmd/pulse/main.go
      - tar -czf {{.DIST_DIR}}/{{.BINARY_NAME}}-windows-amd64.tar.gz -C {{.BUILD_DIR}} {{.BINARY_NAME}}-windows-amd64.exe
      
      # Build for macOS
      - GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version={{.VERSION}} -X main.build={{.BUILD}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-amd64 cmd/pulse/main.go
      - tar -czf {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-amd64.tar.gz -C {{.BUILD_DIR}} {{.BINARY_NAME}}-darwin-amd64

  all:
    desc: Run all tasks (clean, build, test, coverage)
    cmds:
      - task: clean
      - task: build
      - task: test
      - task: coverage